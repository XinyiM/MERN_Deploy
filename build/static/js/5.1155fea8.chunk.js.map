{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","shared/util/validators.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js","places/pages/NewPlace.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_defineProperty","obj","value","configurable","writable","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","validators","isValid","o","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","done","e","_e","f","TypeError","it","err","normalCompletion","didErr","step","next","_e2","validator","trim","test","inputReducer","state","action","isTouched","Input","props","useReducer","initialValue","initialValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","touchHandler","element","placeholder","onChange","onBlur","rows","className","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","style","display","accept","pickedFile","fileIsValid","files","center","src","alt","onClick","current","click","NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","title","description","address","image","inputHandler","history","useHistory","placeSubmitHandler","a","preventDefault","formData","FormData","append","process","Authorization","token","Fragment","onClear","onSubmit","asOverlay","disabled"],"mappings":"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","file":"static/js/5.1155fea8.chunk.js","sourcesContent":["import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, { useReducer, useEffect } from 'react';\n// useStata allows you to write some logic that \n// runs when you want to change the state to do some complex \n// than just set a value\nimport \"./Input.css\";\nimport { validate } from \"../../util/validators\";\n\n\nconst inputReducer = (state, action) => {\n    switch (action.type) {\n        case 'CHANGE':\n            return {\n                // create a copy of the old state\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n        case 'TOUCH':\n            return {\n                ...state,\n                isTouched: true\n            }\n        default:\n            return state;\n    }\n};\n\nconst Input = props => {\n    // register the reducer using useReducer\n    // params: reducer and a initial state\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.initialValue || '', // can be a value provided by outside\n        isValid: props.initialValid || false,\n        isTouched: false\n    });\n    // return: currentState, dispatchFunction \n    // this will trigger if the user enters something.\n\n    const { id, onInput } = props;\n    const { value, isValid } = inputState;\n\n    useEffect(() => {\n        onInput(id, value,isValid)\n    }, [id, value, isValid, onInput] );\n    // might lead to infinite loops\n    // onInput takes from props from newPlace\n\n    const changeHandler = event => {\n        // event is automatically got object on the change event\n        // value is the value the user entered.\n        dispatch({\n            type: 'CHANGE',\n            val: event.target.value,\n            validators: props.validators\n        });\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: 'TOUCH'\n        });\n    };\n\n    const element = props.element === \"input\" ? (\n        <input\n            id={props.id}\n            type={props.type}\n            placeholder={props.placeholder}\n            onChange={changeHandler}\n            onBlur={touchHandler}\n            value={inputState.value}\n        />\n    ) : (\n            <textarea\n                id={props.id}\n                rows={props.rows || 3}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value} />\n        );\n\n    // if input state is valid is false;\n\n    // only show red if the the input is not valid and the textArea is touched.\n    return <div className={`form-control ${!inputState.isValid &&\n        inputState.isTouched &&\n        'form-control--invalid'}`}>\n            \n        <label htmlFor={props.id}> {props.label} </label>\n        {element}\n        {/* only show errorText if the textArea is Touched  */}\n        {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n}\n\nexport default Input;","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n      case 'INPUT_CHANGE':\n        let formIsValid = true;\n        for (const inputId in state.inputs) {\n          if(!state.inputs[inputId]) continue;\n          if (inputId === action.inputId) {\n            formIsValid = formIsValid && action.isValid;\n          } else {\n            formIsValid = formIsValid && state.inputs[inputId].isValid;\n          }\n        }\n        return {\n          ...state,\n          inputs: { // Attention: 是inputs不是input!!\n            ...state.inputs,\n            [action.inputId]: {\n              value: action.value,\n              isValid: action.isValid\n            }\n          },\n          isValid: formIsValid\n        };\n        case \"SET_DATA\":\n            return {\n                ...state,\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            };\n      default:\n        return state;\n    }\n  };\n\nconst useForm = (initialInputs, initialFormValidity) => {\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: initialInputs,\n        // a nested object that stores the info of individual inputs\n        isValid: initialFormValidity\n        // isValid stores the info whether the overall form is valid.\n      });\n\n      const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n          type: 'INPUT_CHANGE',\n          value: value,\n          isValid: isValid,\n          inputId: id\n        })\n      }, []);\n\n      const setFormData = useCallback((inputData, formValidity) => {\n          dispatch({\n              type: \"SET_DATA\",\n              inputs: inputData,\n              formIsValid: formValidity\n          });\n      }, []);\n\n\n      return [formState, inputHandler, setFormData];\n};\n\nexport default useForm;","import React, { useRef, useState, useEffect}from 'react';\nimport Button from './Button';\nimport './ImageUpload.css'\n\nconst ImageUpload = props => {\n    const [file, setFile] = useState();\n    const [previewUrl, setPreviewUrl] = useState();\n    const [isValid, setIsValid] = useState(false);\n    const filePickerRef = useRef();\n\n    useEffect(() => {\n        if(!file){\n            return;\n        }\n        const fileReader = new FileReader();\n        // use the fileReader to convert the binary data to a readable outputable image\n        fileReader.onload = () => {\n            setPreviewUrl(fileReader.result);\n        }\n        // this function will call once the read is done\n        fileReader.readAsDataURL(file);\n        // create a URL \n    }, [file]);\n\n    const pickedHanlder = event => {\n        let pickedFile;\n        let fileIsValid = isValid;\n        if (event.target.files && event.target.files.length === 1){\n            pickedFile = event.target.files[0];\n            setFile(pickedFile);\n            setIsValid(true);\n            fileIsValid = true;\n        }else{\n        setIsValid(false);\n        fileIsValid = false;\n        }\n        props.onInput(props.id, pickedFile, fileIsValid);\n    };\n    const pickImageHandler = () => {\n        filePickerRef.current.click();\n        // exists on this DOM node and will open up a the file picker\n    };\n    return (\n        <div className=\"form-control\">\n            <input\n                id={props.id}\n                ref={filePickerRef}\n                style={{ display: 'none' }}\n                type=\"file\"\n                accept=\".jpg,.png,.jpeg\"\n                onChange={pickedHanlder}\n            />\n            <div className={`image-upload ${props.center && `center`}`}>\n                <div className='image-upload__preview'>\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\"/>}\n                    {!previewUrl && <p>Please pick up a image</p>}\n                </div>\n                <Button type=\"button\" onClick={pickImageHandler}> PICK IMAGE</Button>\n            </div>\n            {!isValid && <p>{props.errorText}</p>}\n        </div>\n    );\n};\n\nexport default ImageUpload;","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport Button from '../../shared/components/FormElements/Button';\nimport useForm from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport './NewPlace.css';\n\n\n\nconst NewPlace = () => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [formState, inputHandler] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false\n      },\n      description: {\n        value: \"\",\n        isValid: false\n      },\n      address: {\n        value: \"\",\n        isValid: false\n      },\n      image: {\n        value: null,\n        isValid: false\n      }\n    }, false\n  );\n\n  const history = useHistory();\n  const placeSubmitHandler = async event => {\n    event.preventDefault();\n    try {\n      const formData = new FormData();\n      formData.append('title', formState.inputs.title.value);\n      formData.append('description', formState.inputs.description.value);\n      formData.append('address', formState.inputs.address.value);\n      // formData.append('creator', auth.userId);\n      formData.append('image', formState.inputs.image.value);\n      await sendRequest(process.env.REACT_APP_BACKEND_URL+'/places', 'POST', formData,\n      {\n        Authorization: 'Bear ' + auth.token\n      });\n      // Redirect the user to anohter page\n      // push the user to the starting page : / \n      history.push('/');\n    } catch (err) { }\n  };\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <form className=\"place-form\" onSubmit={placeSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input\n          id=\"title\"\n          element=\"input\"\n          type='text'\n          label=\"Title\"\n          validators={[VALIDATOR_REQUIRE()]}\n          // returns a validator configurations \n          errorText=\"Please enter a valid title.\"\n          onInput={inputHandler}\n        />\n        {/* for this input, make sure the value is not empty */}\n        <Input\n          id=\"description\"\n          element=\"textarea\"\n          label=\"Description\"\n          validators={[VALIDATOR_MINLENGTH(5)]}\n          errorText=\"Please enter a valid description (at least 5 chars).\"\n          onInput={inputHandler}\n        />\n        <Input\n          id=\"address\"\n          element=\"input\"\n          label=\"Address\"\n          validators={[VALIDATOR_REQUIRE()]}\n          errorText=\"Please enter a valid address.\"\n          onInput={inputHandler}\n        />\n        <ImageUpload id=\"image\" onInput={inputHandler} errorText=\"Please Provide an image.\" />\n        <Button type=\"submit\" disabled={!formState.isValid}>\n          ADD PLACE\n    </Button>\n      </form>\n    </React.Fragment>\n  );\n}\nexport default NewPlace;"],"sourceRoot":""}