{"version":3,"sources":["shared/context/auth-context.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Backdrop.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","shared/hooks/auth-hook.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","LoadingSpinner","props","className","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","MainHeader","children","NavLinks","auth","useContext","to","exact","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","useState","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","Fragment","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","Auth","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","useCallback","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","logoutTimer","storedData","parse","getItem","useAuth","path","Provider","value","fallback","render"],"mappings":"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","file":"static/js/main.d81106f1.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    userId: null,\n    token: null,\n    login: () => { },\n    logout: () => { }\n});","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import React from 'react';\n\nimport './MainHeader.css';\n\nconst MainHeader = props => {\n  return <header className=\"main-header\">{props.children}</header>;\n};\n\nexport default MainHeader;\n","import React, { useContext } from 'react';\nimport './NavLinks.css'\nimport { NavLink } from 'react-router-dom';\nimport { AuthContext } from '../../context/auth-context';\n\nconst NavLinks = props => {\n    const auth = useContext(AuthContext);\n    \n    return <ul className='nav-links'>\n        <li>\n            <NavLink to ='/' exact> All USERS</NavLink>\n        </li>\n        {auth.isLoggedIn && (\n        <li>\n            <NavLink to = {`/${auth.userId} /places`} > MY PLACES</NavLink>\n        </li>\n        )}\n        {auth.isLoggedIn && (\n        <li>\n            <NavLink to ='/places/new'> ADD PLACE</NavLink>\n        </li>\n        )}\n        {!auth.isLoggedIn && (\n        <li>\n            <NavLink to ='/auth'> AUTHENTICATE</NavLink>\n        </li>\n        )}\n        {auth.isLoggedIn && (\n            <li>\n                <button onClick={auth.logout}> LOGOUT </button>\n            </li>\n        )}\n    </ul>\n}\n\nexport default NavLinks;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\nimport './SideDrawer.css';\n\n\nconst SideDrawer = props => {\n    const content = (\n        <CSSTransition\n            in={props.show}\n            timeout={200}\n            classNames=\"slide-in-left\"\n            mountOnEnter\n            unmountOnExit\n        >\n            <aside className='side-drawer'\n            onClick={props.onClick}>\n                {props.children}\n            </aside>\n        </CSSTransition>);\n    return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\n};\n\nexport default SideDrawer;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport MainHeader from './MainHeader';\nimport NavLinks from './NavLinks';\nimport SideDrawer from './SideDrawer';\nimport Backdrop from '../UIElements/Backdrop';\nimport './MainNavigation.css';\n\nconst MainNavigation = props => {\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n\n  const openDrawerHandler = () => {\n    setDrawerIsOpen(true);\n  };\n\n  const closeDrawerHandler = () => {\n    setDrawerIsOpen(false);\n  };\n\n  return (\n    <React.Fragment>\n      {drawerIsOpen && <Backdrop onClick={closeDrawerHandler} />}\n\n      <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\n        <nav className=\"main-navigation__drawer-nav\">\n          <NavLinks />\n        </nav>\n      </SideDrawer>\n\n      <MainHeader>\n        <button className=\"main-navigation__menu-btn\" onClick={openDrawerHandler}>\n          <span />\n          <span />\n          <span />\n        </button>\n        <h1 className=\"main-navigation__title\">\n          <Link to=\"/\">YourPlaces</Link>\n        </h1>\n        <nav className=\"main-navigation__header-nav\">\n          <NavLinks />\n        </nav>\n      </MainHeader>\n    </React.Fragment>\n  );\n};\n\nexport default MainNavigation;\n","import React, { Suspense } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch\n} from 'react-router-dom';\n\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport LoadingSpinner from './shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from './shared/hooks/auth-hook';\n\nconst Users = React.lazy(() => import('./user/pages/Users'));\nconst NewPlace = React.lazy(() => import('./places/pages/NewPlace'));\nconst UserPlaces = React.lazy(() => import('./places/pages/UserPlaces'));\nconst UpdatePlace = React.lazy(() => import('./places/pages/UpdatePlaces'));\nconst Auth = React.lazy(() => import('./user/pages/Auth'));\n\n\n\nconst App = () => {\n  const { token, login, logout, userId } = useAuth();\n\n  let routes;\n  if (token) {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path='/:userId/places'>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\" exact>\n          <NewPlace />\n        </Route>\n        {/* should put NewPlaces first and then UpdatePlace */}\n        {/* in case the new is interpreted as the placeId */}\n        <Route path=\"/places/:placeId\">\n          <UpdatePlace />\n        </Route>\n        <Redirect to='/' />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path='/:userId/places'>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/auth\" >\n          <Auth />\n        </Route>\n        <Redirect to='/auth' />\n      </Switch>\n    );\n  }\n  return (\n    // every component used in the app.js has access to the context\n    <AuthContext.Provider\n      value={{\n        isLoggedIn: !!token, // convert to boolean\n        token: token,\n        userId: userId,\n        login: login,\n        logout: logout\n      }}>\n      {/* bind the value with the context  */}\n      {/* when the value changes, everything in the context will re-render */}\n      <Router>\n        <MainNavigation />\n        <main>\n          <Suspense fallback=\n            {\n              <div className=\"center\">\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            <Switch>\n              {routes}\n            </Switch>\n          </Suspense>\n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","import { useState, useCallback, useEffect } from 'react';\n\nlet logoutTimer; //general variable\n\n\nexport const useAuth = () => {\n    const [token, setToken] = useState(false);\n    const [tokenExpirationDate, setTokenExpirationDate] = useState();\n    const [userId, setUserId] = useState(false);\n    // APP component is the first one when renders\n\n    const login = useCallback((uid, token, expirationDate) => {\n        setToken(token);\n        setUserId(uid);\n        // create an expiration date\n        // after 1 hour, it will automatically logged out.\n        const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n        // generate a date object from now to 1h later\n        setTokenExpirationDate(tokenExpirationDate);\n        localStorage.setItem(\n            'userData',\n            JSON.stringify({\n                userId: uid,\n                token: token,\n                expiration: tokenExpirationDate.toISOString()\n            }));\n        // auto log-in\n    }, []);\n\n    const logout = useCallback(() => {\n        setToken(null);\n        setTokenExpirationDate(null);\n        setUserId(null);\n        localStorage.removeItem('userData');\n    }, []);\n\n    useEffect(() => {\n        if (token && tokenExpirationDate) {\n            const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n            setTimeout(logout, remainingTime)\n        } else {\n            clearTimeout(logoutTimer); // clear any ongoing timers\n        }\n    }, [token, logout, tokenExpirationDate])\n\n    useEffect(() => {\n        const storedData = JSON.parse(localStorage.getItem('userData'));\n        // get the data stored using JSON format\n        // convert JSON data to normal JS object\n        if (\n            storedData &&\n            storedData.token &&\n            new Date(storedData.expirationDate > new Date())) {\n            login(storedData.userId, storedData.token, new Date(storedData.expiration)); // trigger the login logic\n        }\n    }, [login]); // no dependencies so only render once.\n\n    return { token, login, logout, userId };\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}