{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","useHttpClient","isLoading","error","sendRequest","clearError","confirmDeleteHandler","a","process","id","authorization","auth","token","onDelete","closeMapHandler","useContext","AuthContext","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.2d6f749b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\n// use Ref can be used to create references \n// get a reference of a real DOM node\nimport \"./Map.css\";\n\nconst Map = props => {\n    const mapRef = useRef(); // a empty connection\n    \n    const { center, zoom } = props; \n    useEffect(() => {\n        const map = new window.google.maps.Map(mapRef.current, {\n            center: center,\n            zoom: zoom\n        });\n        // create a new marker in the center of the map\n        new window.google.maps.Marker({ position: center, map: map});    \n    }, [center, zoom]);\n    \n    return (<div \n    ref={mapRef} // where connection is established\n    className={`map ${props.className}`} \n    style={props.style}></div>);\n};\n\nexport default Map;","import React, { useContext, useState } from 'react';\n\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './PlaceItem.css';\n\nconst PlaceItem = props => {\n    const [showMap, setShowMap] = useState(false);\n    const [showConfirmModal, setShowConfirmModal] = useState(false);\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const showDeleteWarningHandler = () => setShowConfirmModal(true);\n    const cancelConfirmModal = () => setShowConfirmModal(false);\n    const confirmDeleteHandler = async () => {\n        setShowConfirmModal(false);\n        try {\n            await sendRequest(\n                process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`,\n                'DELETE',\n                null,\n                {\n                    authorization: 'BEAR ' + auth.token\n                }\n            );\n            props.onDelete(props.id);\n        } catch (err) { }\n    }\n    const openMapHandler = () => setShowMap(true);\n    const closeMapHandler = () => setShowMap(false);\n    const auth = useContext(AuthContext);\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <Modal show={showMap}\n                onCancel={closeMapHandler}\n                header={props.address}\n                contentClass=\"place-item__modal-content\"\n                footerClass=\"place-item__modal-actions\"\n                footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n            >\n                <div className=\"map-container\">\n                    <Map center={props.coordinates} zoom={16} />\n                </div>\n            </Modal>\n\n            <Modal\n                show={showConfirmModal}\n                header=\"Are you sure?\"\n                footerClass=\"place-item__modal_actions\"\n                footer={\n                    <React.Fragment>\n                        <Button inverse onClick={cancelConfirmModal}> CANCEL</Button>\n                        <Button danger onClick={confirmDeleteHandler}> DELETE</Button>\n                    </React.Fragment>\n                }>\n                <p> Do you want to proceed and delete the place?</p>\n                <p> Please note that this cannot be undone.</p>\n            </Modal>\n\n            <li className='place-item'>\n                <Card className='place-item__content'>\n                    {isLoading && <LoadingSpinner asOverlay/>}\n                    <div className='place-item__image'>\n                        <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title} />\n                    </div>\n                    <div className='place-item__info'>\n                        <h2> {props.title}</h2>\n                        <h3> {props.address}</h3>\n                        <p> {props.description}</p>\n                    </div>\n                    <div className='place-item__actions'>\n                        <Button inverse onClick={openMapHandler}> VIEW ON MAP</Button>\n                        {auth.userId === props.creatorId && (\n                            <>\n                                <Button to={`/places/${props.id}`}> EDIT</Button>\n                                <Button danger onClick={showDeleteWarningHandler}> DELETE</Button>\n                            </>\n                        )}\n\n                    </div>\n                </Card>\n            </li>\n        </React.Fragment>\n    );\n}\n\nexport default PlaceItem;","import React from 'react';\n\nimport Card from '../../shared/components/UIElements/Card.js';\n\nimport './PlaceList.css';\nimport './PlaceItem';\nimport PlaceItem from './PlaceItem';\nimport Button from '../../shared/components/FormElements/Button';\n\nconst PlaceList = props => {\n    // output a list of places\n    if (props.items.length === 0) {\n        return <div className=\"place-list center\">\n            <Card>\n                <h2> No places found. Maybe create one?</h2>\n                <Button to='/places/new/'>Share Place</Button>\n            </Card>\n        </div>\n    }\n    return <ul className='place-list'>\n        {props.items.map(place =>\n            <PlaceItem key={place.id}\n                id={place.id}\n                image={place.image}\n                title={place.title}\n                description={place.description}\n                address={place.address}\n                creatorId={place.creator}\n                coordinates={place.location}\n                onDelete={props.onDeletePlace}\n            />\n        )}\n    </ul>\n}\n\nexport default PlaceList;","import React, { useEffect, useState } from 'react';\n// import PlaceItem from '../components/PlaceItem';\nimport { useParams } from 'react-router-dom';\nimport PlaceList from '../components/PlaceList';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\n\n\nconst UserPlaces = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedPlaces, setLoadedPlaces] = useState([]);\n  // access the userId encoded in the url\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n        setLoadedPlaces(responseData.places)\n      } catch (err) { }\n    };\n    fetchPlaces();\n  }, [sendRequest, userId]);\n\n  const placeDeleteHandler = (deletedPlaceId) => {\n    setLoadedPlaces(\n      prevPlaces =>\n        prevPlaces.filter(place => place.id !== deletedPlaceId)\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} asOverlay onClear={clearError} />\n      { isLoading && (\n        <div className='center'>\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeleteHandler} />}\n    </React.Fragment>\n  );\n}\n\nexport default UserPlaces;"],"sourceRoot":""}